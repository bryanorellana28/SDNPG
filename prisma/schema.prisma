// This Prisma schema uses MySQL database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OPERATOR
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  role     Role   @default(ADMIN)
}

model Credential {
  id          Int         @id @default(autoincrement())
  username    String
  password    String
  description String
  equipments  Equipment[]
}

model Site {
  id         Int         @id @default(autoincrement())
  nombre     String
  clave      String
  ubicacion  String
  zona       String
  equipments Equipment[]
}

model Equipment {
  id           Int         @id @default(autoincrement())
  hostname     String
  ip           String
  chassis      String
  serial       String
  version      String
  type         String
  networkRole  String      @default("Nodo")
  site         Site?       @relation(fields: [siteId], references: [id])
  siteId       Int?
  credential   Credential? @relation(fields: [credentialId], references: [id])
  credentialId Int?
  model        Model?      @relation(fields: [modelId], references: [id])
  modelId      Int?
  jobs         Job[]
  backups      Backup[]
  services     Service[]
  ports        PortInventory[]
  limitantes   Limitante[]
}

model Backup {
  id         Int       @id @default(autoincrement())
  deviceId   Int
  equipment  Equipment @relation(fields: [deviceId], references: [id])
  exportPath String
  exportHash String
  binaryPath String?
  binaryHash String?
  diffPath   String?
  createdAt  DateTime  @default(now())
}

model Job {
  id            Int          @id @default(autoincrement())
  deviceId      Int
  type          String
  status        String
  scheduledAt   DateTime?
  goldenImageId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  equipment     Equipment    @relation(fields: [deviceId], references: [id])
  goldenImage   GoldenImage? @relation(fields: [goldenImageId], references: [id])
}

model GoldenImage {
  id         Int      @id @default(autoincrement())
  model      String   @unique
  version    String
  filename   String
  sha256     String
  uploadedAt DateTime @default(now())
  jobs       Job[]
  models     Model[]
}

model Model {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  goldenImage   GoldenImage? @relation(fields: [goldenImageId], references: [id])
  goldenImageId Int?
  equipments    Equipment[]
}

enum ServiceType {
  CAPA2
  GESTIONADO
}

model Client {
  id        Int       @id @default(autoincrement())
  name      String
  nit       String?
  contact   String?
  phone     String?
  services  Service[]
}

model Service {
  id          Int         @id @default(autoincrement())
  type        ServiceType
  client      Client      @relation(fields: [clientId], references: [id])
  clientId    Int
  equipment   Equipment?  @relation(fields: [equipmentId], references: [id])
  equipmentId Int?
  port        String?
  deviceModel String?
  config      String?
  locationDescription String @default("")
  serviceIdentifier  String @default("")
}

model PortInventory {
  id           Int        @id @default(autoincrement())
  equipment    Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId  Int
  physicalName String
  description  String
  status       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Limitante {
  id          Int        @id @default(autoincrement())
  equipment   Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId Int
  name        String
  bandwidth   String
  port        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
